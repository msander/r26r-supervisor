{"version":3,"sources":["../src/server.js"],"names":["server","cb","store","routes","history","url","getLocals","location","error","redirectLocation","renderProps","unsubscribe","initialState","listen","newLocation","oldLocation","pathname","search"],"mappings":";;;;;kBAIwBA,M;;AAJxB;;AACA;;;;AACA;;;;AAEe,SAASA,MAAT,OAA4DC,EAA5D,EAAgE;AAAA,MAA9CC,KAA8C,QAA9CA,KAA8C;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,OAA+B,QAA/BA,OAA+B;AAAA,MAAtBC,GAAsB,QAAtBA,GAAsB;AAAA,MAAjBC,SAAiB,QAAjBA,SAAiB;;AAC7E,0BAAM,EAAEH,cAAF,EAAUC,gBAAV,EAAmBG,UAAUF,GAA7B,EAAN,EAA0C,UAACG,KAAD,EAAQC,gBAAR,EAA0BC,WAA1B,EAA0C;AAClF,QAAIF,KAAJ,EAAW;AACTP,SAAGO,KAAH,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EADS,CACoB;AAC7BJ,cAAQO,WAAR,GAFS,CAEc;AACxB,KAHD,MAGO,IAAIF,gBAAJ,EAAsB;AAC3BR,SAAG,IAAH,EAASQ,gBAAT,EAA2B,IAA3B,EAAiC,IAAjC,EAD2B,CACa;AACxCL,cAAQO,WAAR,GAF2B,CAEJ;AACxB,KAHM,MAGA,IAAI,CAACD,WAAL,EAAkB;AACvBT,SAAG,IAAH,EAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EADuB,CACM;AAC7BG,cAAQO,WAAR,GAFuB,CAEA;AACxB,KAHM,MAGA;AACL;AACA,qCAAgB,EAAED,wBAAF,EAAeR,YAAf,EAAsBI,oBAAtB,EAAhB,EAAmD,UAACE,KAAD,EAAQI,YAAR,EAAyB;AAAE;AAC5ER,gBAAQO,WAAR,GAD0E,CACnD;AACvB,YAAIH,KAAJ,EAAW;AACTP,aAAGO,KAAH,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EADS,CACoB;AAC9B,SAFD,MAEO;AACL;AACAJ,kBAAQS,MAAR,CAAe,UAACC,WAAD,EAAiB;AAC9B,gBAAMC,cAAc,0BAAUV,GAAV,CAApB;AACA,gBAAIU,YAAYC,QAAZ,KAAyBF,YAAYE,QAArC,IAAiDD,YAAYE,MAAZ,KAAuBH,YAAYG,MAAxF,EAAgG;AAAE;AAChGhB,iBAAG,IAAH,EAASa,WAAT,EAAsB,IAAtB,EAA4B,IAA5B,EAD8F,CAC3D;AACpC,aAFD,MAEO;AACLb,iBAAG,IAAH,EAAS,IAAT,EAAeS,WAAf,EAA4BE,YAA5B;AACD;AACF,WAPD;AAQD;AACF,OAfD;AAgBD;AACF,GA7BD;AA8BD","file":"server.js","sourcesContent":["import { match } from 'react-router';\nimport loadServerState from './fetch/loadServerState';\nimport { parsePath } from 'history/lib/PathUtils';\n\nexport default function server({ store, routes, history, url, getLocals }, cb) {\n  match({ routes, history, location: url }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      cb(error, null, null, null); // error\n      history.unsubscribe(); // stop the syncing process of store with history\n    } else if (redirectLocation) {\n      cb(null, redirectLocation, null, null); // redirect\n      history.unsubscribe(); // stop the syncing process of store with history\n    } else if (!renderProps) {\n      cb(null, null, null, null);  // 404\n      history.unsubscribe(); // stop the syncing process of store with history\n    } else {\n      // success\n      loadServerState({ renderProps, store, getLocals }, (error, initialState) => { // eslint-disable-line no-shadow, max-len\n        history.unsubscribe(); // stop the syncing process of store with history\n        if (error) {\n          cb(error, null, null, null); // error\n        } else {\n          // Pick up current location from the history via synchronous history.listen\n          history.listen((newLocation) => {\n            const oldLocation = parsePath(url);\n            if (oldLocation.pathname !== newLocation.pathname || oldLocation.search !== newLocation.search) { // eslint-disable-line max-len\n              cb(null, newLocation, null, null); // location changed -> redirect to new location\n            } else {\n              cb(null, null, renderProps, initialState);\n            }\n          })();\n        }\n      });\n    }\n  });\n}\n"]}