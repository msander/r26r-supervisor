{"version":3,"sources":["../src/configure.js"],"names":["configure","createReducer","reducers","routing","options","middlewares","enhancers","initialState","history","reducer","reduxSimpleRouterMiddleware","middleware","finalCreateStore","store","replaceReducer","patchedReplaceReducer","newReducers"],"mappings":";;;;;;;;kBAUwBA,S;;AAVxB;;AACA;;;;AAEA,SAASC,aAAT,GAAsC;AAAA,MAAfC,QAAe,yDAAJ,EAAI;;AACpC,SAAO,yCACFA,QADE;AAELC;AAFK,KAAP;AAID;;AAEc,SAASH,SAAT,GAAiC;AAAA,MAAdI,OAAc,yDAAJ,EAAI;AAAA,0BACiCA,OADjC,CACtCF,QADsC;AAAA,MACtCA,QADsC,qCAC3B,EAD2B;AAAA,6BACiCE,OADjC,CACvBC,WADuB;AAAA,MACvBA,WADuB,wCACT,EADS;AAAA,2BACiCD,OADjC,CACLE,SADK;AAAA,MACLA,SADK,sCACO,EADP;AAAA,8BACiCF,OADjC,CACWG,YADX;AAAA,MACWA,YADX,yCAC0B,EAD1B;AAAA,MAExCC,OAFwC,GAE5BJ,OAF4B,CAExCI,OAFwC;;AAI9C;;AACA,MAAMC,UAAUR,cAAcC,QAAd,CAAhB;;AAEA;AACA,MAAMQ,8BAA8B,wCAAiBF,OAAjB,CAApC;;AAEA;AACA,MAAMG,cACJD,2BADI,4BAEDL,WAFC,EAAN;;AAKA;AACA,MAAMO,mBAAmB,iCACvB,2DAAmBD,UAAnB,EADuB,4BAEpBL,SAFoB,uBAAzB;;AAKA;AACA,MAAMO,QAAQD,iBAAiBH,OAAjB,EAA0BF,YAA1B,CAAd;;AAEA;AACA,MAAMO,iBAAiBD,MAAMC,cAA7B;AACAD,QAAMC,cAAN,GAAuB,SAASC,qBAAT,GAAiD;AAAA,QAAlBC,WAAkB,yDAAJ,EAAI;;AACtEF,mBAAeb,cAAce,WAAd,CAAf;AACD,GAFD;;AAIA;AACAR,YAAU,4CAAqBA,OAArB,EAA8BK,KAA9B,CAAV;;AAEA,SAAO;AACLA,gBADK;AAELL;AAFK,GAAP;AAID","file":"configure.js","sourcesContent":["import { createStore as _createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport { syncHistoryWithStore, routerMiddleware, routerReducer } from 'react-router-redux';\n\nfunction createReducer(reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    routing: routerReducer,\n  });\n}\n\nexport default function configure(options = {}) {\n  const { reducers = {}, middlewares = [], enhancers = [], initialState = {} } = options;\n  let { history } = options;\n\n  // create reducer from reducers\n  const reducer = createReducer(reducers);\n\n  // Sync dispatched route actions to the history\n  const reduxSimpleRouterMiddleware = routerMiddleware(history);\n\n  // create middlewares\n  const middleware = [\n    reduxSimpleRouterMiddleware,\n    ...middlewares,\n  ];\n\n  // apply middlewares & store enhancers to createStore\n  const finalCreateStore = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  )(_createStore);\n\n  // finally create the store\n  const store = finalCreateStore(reducer, initialState);\n\n  // monkey patch replaceReducer to apply new reducers\n  const replaceReducer = store.replaceReducer;\n  store.replaceReducer = function patchedReplaceReducer(newReducers = {}) {\n    replaceReducer(createReducer(newReducers));\n  };\n\n  // Create an enhanced history that syncs navigation events with the store\n  history = syncHistoryWithStore(history, store);\n\n  return {\n    store,\n    history,\n  };\n}\n"]}