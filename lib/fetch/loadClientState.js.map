{"version":3,"sources":["../../src/fetch/loadClientState.js"],"names":["cb","history","routes","store","getLocals","initialState","renderProps","beforeResolve","afterResolve","hasInitialState","listen","location","hooksData","components","getAllLocals","resolveDataDependencies","then","registerHook","catch","err","shouldFetch","oldLocation","newLocation","pathname","search","log","e","process","env","NODE_ENV","console","error","Promise","resolve","listenBefore","continueTransition","redirectLocation","transitionTo"],"mappings":";;;;;;kBAyEe,iBAA8GA,EAA9G,EAAkH;AAAA,MAAtGC,OAAsG,SAAtGA,OAAsG;AAAA,MAA7FC,MAA6F,SAA7FA,MAA6F;AAAA,MAArFC,KAAqF,SAArFA,KAAqF;AAAA,MAA9EC,SAA8E,SAA9EA,SAA8E;AAAA,iCAAnEC,YAAmE;AAAA,MAAnEA,YAAmE,sCAApD,EAAoD;AAAA,MAAhDC,WAAgD,SAAhDA,WAAgD;AAAA,MAAnCC,aAAmC,SAAnCA,aAAmC;AAAA,MAApBC,YAAoB,SAApBA,YAAoB;AAAE;AACjI,MAAMC,kBAAkB,CAAC,uBAAQJ,YAAR,CAAzB;;AAEA;AACAJ,UAAQS,MAAR,CAAe,UAACC,QAAD,EAAc;AAC3B,QAAMC,YAAY,EAAEX,gBAAF,EAAWC,cAAX,EAAmBC,YAAnB,EAA0BC,oBAA1B,EAAqCO,kBAArC,EAA+CJ,4BAA/C,EAA8DC,0BAA9D,EAAlB;;AAEA,QAAI,CAACC,eAAL,EAAsB;AAAA,UACZI,UADY,GACGP,WADH,CACZO,UADY;;AAEpB,UAAMC,eAAe,yBAAgBR,WAAhB,EAA6BH,KAA7B,EAAoCC,SAApC,CAArB;;AAEAW,8BAAwBF,UAAxB,EAAoCC,YAApC,EAAkDR,WAAlD,EAA+DC,aAA/D,EAA8EC,YAA9E,EACGQ,IADH,CACQ,YAAM;AACVC,qBAAaL,SAAb;AACAZ;AACD,OAJH,EAKGkB,KALH,CAKS,UAACC,GAAD,EAAS;AACdF,qBAAaL,SAAb;AACAZ,WAAGmB,GAAH;AACD,OARH;AASD,KAbD,MAaO;AACLF,mBAAaL,SAAb;AACAZ;AACD;AACF,GApBD;AAqBD,C;;AAjGD;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMoB,cAAc,SAAdA,WAAc,CAACC,WAAD,EAAcC,WAAd;AAAA,SAA8B,CAACD,WAAD,IAAgBC,WAAhB,IAA+BD,YAAYE,QAAZ,KAAyBD,YAAYC,QAApE,IAAgFF,YAAYG,MAAZ,KAAuBF,YAAYE,MAAjJ;AAAA,CAApB,C,CAA6K;;AAP7K;AASA,IAAMC,MAAM,SAANA,GAAM,CAACC,CAAD,EAAO;AACjB,MAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzCC,YAAQC,KAAR,CAAcL,CAAd,EADyC,CACvB;AACnB;AACF,CAJD;;AAMA,IAAMX,0BAA0B,SAA1BA,uBAA0B,CAACF,UAAD,EAAaC,YAAb,EAA2BR,WAA3B,EAAwCC,aAAxC,EAAuDC,YAAvD;AAAA,SAC9BwB,QACGC,OADH,GAEGjB,IAFH,CAEQ,YAAM;AACV,QAAI,OAAOT,aAAP,KAAyB,UAA7B,EAAyC;AACvCA,oBAAcD,WAAd;AACD;AACF,GANH,EAOGY,KAPH,CAOSO,GAPT,EAQGT,IARH,CAQQ;AAAA,WAAM,mDAA8BH,UAA9B,EAA0CC,YAA1C,CAAN;AAAA,GARR,EASGE,IATH,CASQ,YAAM;AACV;AACA,oDAA2BH,UAA3B,EAAuCC,YAAvC,EACGI,KADH,CACSO,GADT,EAEGT,IAFH,CAEQ,YAAM;AACV,UAAI,OAAOR,YAAP,KAAwB,UAA5B,EAAwC;AACtCA,qBAAaF,WAAb;AACD;AACF,KANH,EAOGY,KAPH,CAOSO,GAPT;;AASA;AACA,oDAA2BZ,UAA3B,EAAuCC,YAAvC,EACGI,KADH,CACSO,GADT;;AAGA,WAAOO,QAAQC,OAAR,EAAP;AACD,GAzBH,CAD8B;AAAA,CAAhC;;AA6BA,IAAMhB,eAAe,SAAfA,YAAe,OAAkF;AAAA,MAA/EhB,OAA+E,QAA/EA,OAA+E;AAAA,MAAtEC,MAAsE,QAAtEA,MAAsE;AAAA,MAA9DC,KAA8D,QAA9DA,KAA8D;AAAA,MAAvDC,SAAuD,QAAvDA,SAAuD;AAAA,MAA5CO,QAA4C,QAA5CA,QAA4C;AAAA,MAAlCJ,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AACrG,MAAIa,cAAcV,QAAlB;;AAEAV,UAAQiC,YAAR,CAAqB,UAACvB,QAAD,EAAWwB,kBAAX,EAAkC;AAAE;AACvD,QAAI,CAACf,YAAYC,WAAZ,EAAyBV,QAAzB,CAAL,EAAyC;AACvCwB;AACA;AACD;AACDd,kBAAcV,QAAd;;AAEA,4BAAM,EAAEA,kBAAF,EAAYT,cAAZ,EAAN,EAA4B,UAAC6B,KAAD,EAAQK,gBAAR,EAA0B9B,WAA1B,EAA0C;AACpE,UAAI8B,gBAAJ,EAAsB;AACpBD;AACAlC,gBAAQoC,YAAR,CAAqBD,gBAArB;AACD,OAHD,MAGO,IAAI9B,WAAJ,EAAiB;AAAA,YACdO,UADc,GACCP,WADD,CACdO,UADc;;AAEtB,YAAMC,eAAe,yBAAgBR,WAAhB,EAA6BH,KAA7B,EAAoCC,SAApC,CAArB;;AAEAW,gCAAwBF,UAAxB,EAAoCC,YAApC,EAAkDR,WAAlD,EAA+DC,aAA/D,EAA8EC,YAA9E,EACGQ,IADH,CACQmB,kBADR,EAC4BA,kBAD5B,EAEGjB,KAFH,CAESO,GAFT;AAGD,OAPM,MAOA;AACLU;AACD;AACF,KAdD;AAeD,GAtBD;AAuBD,CA1BD","file":"loadClientState.js","sourcesContent":["/* eslint-disable max-len */\nimport { match } from 'react-router';\nimport { PREFETCH, FETCH, DEFER } from './type';\nimport createGetLocals from './getLocals';\nimport getDataDependencies from './getDataDependencies';\nimport isEmpty from 'lodash/isEmpty';\n\nconst shouldFetch = (oldLocation, newLocation) => !oldLocation && newLocation || oldLocation.pathname !== newLocation.pathname || oldLocation.search !== newLocation.search; // eslint-disable-line max-len\n\nconst log = (e) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error(e); // eslint-disable-line no-console\n  }\n};\n\nconst resolveDataDependencies = (components, getAllLocals, renderProps, beforeResolve, afterResolve) =>\n  Promise\n    .resolve()\n    .then(() => {\n      if (typeof beforeResolve === 'function') {\n        beforeResolve(renderProps);\n      }\n    })\n    .catch(log)\n    .then(() => getDataDependencies(PREFETCH, components, getAllLocals))\n    .then(() => {\n      // call fetch but doesn't wait for it\n      getDataDependencies(FETCH, components, getAllLocals)\n        .catch(log)\n        .then(() => {\n          if (typeof afterResolve === 'function') {\n            afterResolve(renderProps);\n          }\n        })\n        .catch(log);\n\n      // call defer but doesn't wait for it\n      getDataDependencies(DEFER, components, getAllLocals)\n        .catch(log);\n\n      return Promise.resolve();\n    });\n\n\nconst registerHook = ({ history, routes, store, getLocals, location, beforeResolve, afterResolve }) => {\n  let oldLocation = location;\n\n  history.listenBefore((location, continueTransition) => { // eslint-disable-line no-shadow\n    if (!shouldFetch(oldLocation, location)) {\n      continueTransition();\n      return;\n    }\n    oldLocation = location;\n\n    match({ location, routes }, (error, redirectLocation, renderProps) => {\n      if (redirectLocation) {\n        continueTransition();\n        history.transitionTo(redirectLocation);\n      } else if (renderProps) {\n        const { components } = renderProps;\n        const getAllLocals = createGetLocals(renderProps, store, getLocals);\n\n        resolveDataDependencies(components, getAllLocals, renderProps, beforeResolve, afterResolve)\n          .then(continueTransition, continueTransition)\n          .catch(log);\n      } else {\n        continueTransition();\n      }\n    });\n  });\n};\n\n\nexport default function ({ history, routes, store, getLocals, initialState = {}, renderProps, beforeResolve, afterResolve }, cb) { // eslint-disable-line max-len\n  const hasInitialState = !isEmpty(initialState);\n\n  // use synchronous listen to get current url -> changes with history v3\n  history.listen((location) => {\n    const hooksData = { history, routes, store, getLocals, location, beforeResolve, afterResolve };\n\n    if (!hasInitialState) {\n      const { components } = renderProps;\n      const getAllLocals = createGetLocals(renderProps, store, getLocals);\n\n      resolveDataDependencies(components, getAllLocals, renderProps, beforeResolve, afterResolve)\n        .then(() => {\n          registerHook(hooksData);\n          cb();\n        })\n        .catch((err) => {\n          registerHook(hooksData);\n          cb(err);\n        });\n    } else {\n      registerHook(hooksData);\n      cb();\n    }\n  })();\n}\n"]}